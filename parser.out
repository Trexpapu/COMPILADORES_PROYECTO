Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASIGNACION
    BUCLE_FOR
    BUCLE_WHILE
    CADENA
    CARACTER
    CARACTER_ERROR
    COLON
    COMENTARIOS
    COMENTARIO_BLOQUE
    CORCHETE_DERECHO
    CORCHETE_IZQUIERDO
    DECREMENTO
    DISTINTO
    DIVI_RESULTADO
    ENTERO_SOBREPASADO
    IGUAL
    INCREMENTO
    LINEAS
    LLAVE_DER
    LLAVE_IZQ
    MAYOR
    MAYOR_IGUAL
    MENOR
    MENOR_IGUAL
    MULTI_RESULTADO
    NUMERO_DECIMAL
    NUMERO_DECIMAL_CON_ERROR
    NUMERO_DECIMAL_CON_ERROR2
    NUMERO_ENTERO
    OPERADOR_DIVIDIR
    OPERADOR_MODULO
    OPERADOR_MULTIPLICAR
    OPERADOR_RESTA
    OPERADOR_SUMA
    OP_TERNARIO
    PALABRA_RESERVADA_AND
    PALABRA_RESERVADA_BREAK
    PALABRA_RESERVADA_BY
    PALABRA_RESERVADA_DO
    PALABRA_RESERVADA_ELSE
    PALABRA_RESERVADA_FALSE
    PALABRA_RESERVADA_IF
    PALABRA_RESERVADA_MAIN
    PALABRA_RESERVADA_NOT
    PALABRA_RESERVADA_NULL
    PALABRA_RESERVADA_OR
    PALABRA_RESERVADA_RETURN
    PALABRA_RESERVADA_STATIC
    PALABRA_RESERVADA_THEN
    PALABRA_RESERVADA_TO
    PALABRA_RESERVADA_TRUE
    PARENTESIS_DERECHO
    PARENTESIS_IZQUIERDO
    PUNTOS_MAYOR_PUNTOS
    PUNTOS_MENOR_PUNTOS
    PUNTO_Y_COMA
    RESTA_RESULTADO
    SUMA_RESULTADO
    TIPO_DECIMAL
    TIPO_ENTERO
    VARIABLE_ERROR

Grammar

Rule 0     S' -> D
Rule 1     D -> T L
Rule 2     T -> PALABRA_RESERVADA_BOOL
Rule 3     T -> TIPO_CARACTER
Rule 4     L -> VARIABLE LP
Rule 5     LP -> COMA VARIABLE LP
Rule 6     LP -> eps
Rule 7     eps -> <empty>

Terminals, with rules where they appear

ASIGNACION           : 
BUCLE_FOR            : 
BUCLE_WHILE          : 
CADENA               : 
CARACTER             : 
CARACTER_ERROR       : 
COLON                : 
COMA                 : 5
COMENTARIOS          : 
COMENTARIO_BLOQUE    : 
CORCHETE_DERECHO     : 
CORCHETE_IZQUIERDO   : 
DECREMENTO           : 
DISTINTO             : 
DIVI_RESULTADO       : 
ENTERO_SOBREPASADO   : 
IGUAL                : 
INCREMENTO           : 
LINEAS               : 
LLAVE_DER            : 
LLAVE_IZQ            : 
MAYOR                : 
MAYOR_IGUAL          : 
MENOR                : 
MENOR_IGUAL          : 
MULTI_RESULTADO      : 
NUMERO_DECIMAL       : 
NUMERO_DECIMAL_CON_ERROR : 
NUMERO_DECIMAL_CON_ERROR2 : 
NUMERO_ENTERO        : 
OPERADOR_DIVIDIR     : 
OPERADOR_MODULO      : 
OPERADOR_MULTIPLICAR : 
OPERADOR_RESTA       : 
OPERADOR_SUMA        : 
OP_TERNARIO          : 
PALABRA_RESERVADA_AND : 
PALABRA_RESERVADA_BOOL : 2
PALABRA_RESERVADA_BREAK : 
PALABRA_RESERVADA_BY : 
PALABRA_RESERVADA_DO : 
PALABRA_RESERVADA_ELSE : 
PALABRA_RESERVADA_FALSE : 
PALABRA_RESERVADA_IF : 
PALABRA_RESERVADA_MAIN : 
PALABRA_RESERVADA_NOT : 
PALABRA_RESERVADA_NULL : 
PALABRA_RESERVADA_OR : 
PALABRA_RESERVADA_RETURN : 
PALABRA_RESERVADA_STATIC : 
PALABRA_RESERVADA_THEN : 
PALABRA_RESERVADA_TO : 
PALABRA_RESERVADA_TRUE : 
PARENTESIS_DERECHO   : 
PARENTESIS_IZQUIERDO : 
PUNTOS_MAYOR_PUNTOS  : 
PUNTOS_MENOR_PUNTOS  : 
PUNTO_Y_COMA         : 
RESTA_RESULTADO      : 
SUMA_RESULTADO       : 
TIPO_CARACTER        : 3
TIPO_DECIMAL         : 
TIPO_ENTERO          : 
VARIABLE             : 4 5
VARIABLE_ERROR       : 
error                : 

Nonterminals, with rules where they appear

D                    : 0
L                    : 1
LP                   : 4 5
T                    : 1
eps                  : 6

Parsing method: LALR

state 0

    (0) S' -> . D
    (1) D -> . T L
    (2) T -> . PALABRA_RESERVADA_BOOL
    (3) T -> . TIPO_CARACTER

    PALABRA_RESERVADA_BOOL shift and go to state 3
    TIPO_CARACTER   shift and go to state 4

    D                              shift and go to state 1
    T                              shift and go to state 2

state 1

    (0) S' -> D .



state 2

    (1) D -> T . L
    (4) L -> . VARIABLE LP

    VARIABLE        shift and go to state 6

    L                              shift and go to state 5

state 3

    (2) T -> PALABRA_RESERVADA_BOOL .

    VARIABLE        reduce using rule 2 (T -> PALABRA_RESERVADA_BOOL .)


state 4

    (3) T -> TIPO_CARACTER .

    VARIABLE        reduce using rule 3 (T -> TIPO_CARACTER .)


state 5

    (1) D -> T L .

    $end            reduce using rule 1 (D -> T L .)


state 6

    (4) L -> VARIABLE . LP
    (5) LP -> . COMA VARIABLE LP
    (6) LP -> . eps
    (7) eps -> .

    COMA            shift and go to state 8
    $end            reduce using rule 7 (eps -> .)

    LP                             shift and go to state 7
    eps                            shift and go to state 9

state 7

    (4) L -> VARIABLE LP .

    $end            reduce using rule 4 (L -> VARIABLE LP .)


state 8

    (5) LP -> COMA . VARIABLE LP

    VARIABLE        shift and go to state 10


state 9

    (6) LP -> eps .

    $end            reduce using rule 6 (LP -> eps .)


state 10

    (5) LP -> COMA VARIABLE . LP
    (5) LP -> . COMA VARIABLE LP
    (6) LP -> . eps
    (7) eps -> .

    COMA            shift and go to state 8
    $end            reduce using rule 7 (eps -> .)

    LP                             shift and go to state 11
    eps                            shift and go to state 9

state 11

    (5) LP -> COMA VARIABLE LP .

    $end            reduce using rule 5 (LP -> COMA VARIABLE LP .)

